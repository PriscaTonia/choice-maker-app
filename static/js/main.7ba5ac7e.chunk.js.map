{"version":3,"sources":["Display.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","this","props","Quest","Ans","onClick","showAnswer","showForm","checkPopularity","mostRepeatedQuestion","count","Component","Form","type","placeholder","value","question","id","onChange","handleQuestionChange","options","map","option","index","e","handleTextChange","addForm","App","Store","mostRepeatedValue","m","obj","maxCount","i","state","questionStore","hasOwnProperty","console","log","setState","target","oldOptions","event","preventDefault","answer","Math","floor","random","length","condition","push","handleAdd","oldArray","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7ba5ac7e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nclass Display extends Component {\r\n\r\n\r\n    render(){\r\n        return (\r\n            <div className='display'>\r\n                <div className='question'> {this.props.Quest}?</div>\r\n                <br/>\r\n                <div className='answer'>Answer:  {this.props.Ans}</div>\r\n                <hr />\r\n                <br/>\r\n                <div className='btn'>\r\n                    <button onClick={this.props.showAnswer}>Pick Another Answer</button>\r\n              \r\n                    <button onClick={this.props.showForm}>Ask Another Question</button>\r\n\r\n                    <button onClick={this.props.checkPopularity}>Check Question Popularity</button>\r\n                </div>\r\n                <br/>\r\n                <hr />\r\n                <div className='popQ'>Most popular question? : {this.props.mostRepeatedQuestion}</div>\r\n                <div className='popQ'>No of times asked:{this.props.count} </div>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default Display\r\n","\r\nimport React, { Component } from 'react'\r\n\r\n\r\n\r\nclass Form extends Component{\r\n    render() {\r\n        return(\r\n            <div className=\"Form\">\r\n               \r\n\r\n                <form>\r\n                <label>Question</label> \r\n                <input type='text' placeholder='Q: Enter your question here' \r\n                value= {this.props.question} id='question' onChange={this.props.handleQuestionChange}></input>\r\n                <br/>\r\n\r\n                <label>Options</label> \r\n                <div className='input-container'>\r\n                { \r\n                    this.props.options.map((option, index) =>{\r\n                    return(\r\n                        <input type='text' placeholder={`Option ${index}`} value={this.props.options[index]}\r\n                        id={`option${index}`} onChange ={(e) => this.props.handleTextChange(index, e)} /> \r\n                    )\r\n                    })\r\n                } \r\n                </div>\r\n                </form>\r\n\r\n                <div className='btn-cont'>\r\n                <button onClick={this.props.addForm}>+Option</button>\r\n                <button onClick={this.props.showAnswer} id='ans'>Answer</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, {Component} from 'react';\nimport Display from './Display'\nimport Form from './Form'\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      question: '',\n      questionStore: [ ],\n      mostRepeatedQuestion: '',\n      answer: '',\n      options: [ '', '', ''],\n      count: 0,\n      condition: 'Form'\n    }\n    //This is where I set my default state properties\n  }\n  //N.B: These functions below are passed as props to their respective components.\n  \n  checkPopularity = (Store) => {\n\n    var obj = {}, maxCount = 0, mostRepeatedValue, m;\n    Store = this.state.questionStore;\n\n    for(var i in Store){\n      m = Store[i];\n\n      if(!obj.hasOwnProperty(m)){\n        obj[m] = 0;\n      }\n\n      ++obj[m];\n\n      if(obj[m] > maxCount){\n        maxCount = obj[m];\n        mostRepeatedValue= m;\n      }\n      console.log(mostRepeatedValue)\n      \n      this.setState({\n        mostRepeatedQuestion: mostRepeatedValue,\n        count: maxCount\n      })\n    }\n      \n      //this function checks for the question that has been repeated the most times, and the questions are stored in the array called questionStore\n  }\n\n\n  handleQuestionChange = (e) => {\n    if(e.target.id= 'question'){\n      \n      this.setState({\n        \n        question: e.target.value\n      })\n    } \n    //This function gets the value of the input question that is being typed in\n  }\n \n  handleTextChange = (index, e) => {\n    let oldOptions = this.state.options;\n    oldOptions[index] = e.target.value;\n    this.setState({\n      options: oldOptions\n    })\n    //This function gets the value of the input options being typed in\n  }\n\n  showAnswer = (event) => {\n    event.preventDefault();\n    let condition = 'Display';\n    this.setState({\n      answer: this.state.options[Math.floor(Math.random()*this.state.options.length )],\n      condition: condition\n    })\n    var Store = this.state.questionStore;\n    var question= this.state.question\n    Store.push(question)\n    // This function performs the task of choosing a random answer ans changing the initial state of our condition to display the 'Display' component \n  }\n\n  showForm = () => {\n  \n    let condition = 'Form' ;\n    this.setState({\n      question:'',\n      options:['', '', ''],\n      answer:'',\n      condition: condition\n    })\n    //This function resets our state to its default state\n  }\n\n  handleAdd = () =>{\n    let oldArray = this.state.options;\n    oldArray.push('');\n    this.setState({\n      options: oldArray\n    })\n    //This function performs the task of adding new input boxes to our options\n  }\n\n  render(){\n     console.log(this.state) //this is just to make sure we are getting and setting our states correctly\n     \n    return (\n      <div className=\"App\">\n\n\n                <div className='header-cont'>\n                    <header className='logo'>Choice Maker App</header>\n                </div>\n\n        \n        \n        \n        {this.state.condition === 'Form' ? \n        ( <Form addForm = {this.handleAdd} showAnswer={this.showAnswer} handleTextChange={this.handleTextChange} \n          handleQuestionChange={this.handleQuestionChange} question={this.state.question} options={this.state.options}/>) \n         : this.state.condition=== 'Display' ? \n         (<Display Quest = {this.state.question} mostRepeatedQuestion={this.state.mostRepeatedQuestion} count={this.state.count}\n           checkPopularity= {this.checkPopularity} Ans={this.state.answer} \n           showAnswer={this.showAnswer} showForm={this.showForm}/> )\n        :  ( <Form addForm = {this.handleAdd} showAnswer={this.showAnswer} \n          handleTextChange={this.handleTextChange} handleQuestionChange={this.handleQuestionChange} \n          question={this.state.question} options={this.state.options}/>)  \n          //This tenary statement checks the condition in oder for it to display the appropriate component desired.\n          // And each component displayed has a variety of functions to be carried out which are passed in as PROPS\n          }\n        \n        <footer>&copy;Prisca T. All Rights Reserved. 2020</footer>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}